import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
import requests
import time
from threading import Thread
import logging
import os
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–≤–æ–π Telegram Bot —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
tracked_wallets = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}

# Telegram –±–æ—Ç
updater = Updater(BOT_TOKEN, use_context=True)
bot = updater.bot

# –ö—É—Ä—Å SOL –≤ USD (–¥–ª—è —Ç–µ—Å—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API, –Ω–∞–ø—Ä–∏–º–µ—Ä, CoinGecko)
SOL_TO_USD = 137.0  # –ü—Ä–∏–º–µ—Ä: 1 SOL = 137 USD (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—à–µ–ª—å–∫–∞
def monitor_wallet(address, name, types, chat_id):
    last_tx = None
    while name in tracked_wallets:
        try:
            url = f"https://public-api.solscan.io/account/transactions?account={address}&limit=1"
            response = requests.get(url)
            response.raise_for_status()
            txs = response.json()
            
            if txs and len(txs) > 0:
                tx = txs[0]
                tx_hash = tx["txHash"]
                if tx_hash != last_tx:
                    last_tx = tx_hash
                    tx_type = classify_transaction(tx)
                    if tx_type in types:
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–∞–ø–µ (–Ω—É–∂–µ–Ω API –¥–ª—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                        sol_amount = tx.get("lamport", 0) / 1_000_000_000  # –õ–∞–º–ø–æ—Ä—Ç—ã –≤ SOL
                        usd_amount = sol_amount * SOL_TO_USD
                        token_amount = random.uniform(5000000, 10000000)  # –ü—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API
                        token_name = "NYCPR"  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API
                        token_price = 0.000037  # –ü—Ä–∏–º–µ—Ä
                        market_cap = "300.4K"  # –ü—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API

                        msg = (
                            f"#{name.upper()}\n"
                            f"Swapped {sol_amount:.2f} #SOL (${usd_amount:,.2f}) for {token_amount:,.2f} #{token_name} @ ${token_price}\n"
                            f"MC: ${market_cap}\n"
                            f"#Solana | [Cielo](https://www.cielo.app/) | [ViewTx](https://solscan.io/tx/{tx_hash}) | [Chart](https://www.dextools.io/app/en/solana)\n"
                            f"[Buy on Trojan](https://t.me/BloomSolana_bot?start=ref_57Z29YIQ2J)\n\n"
                            f"–ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: https://gmgn.ai/?ref=HiDMfJX4&chain=sol\n"
                            f"–ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Bloom: https://t.me/BloomSolana_bot?start=ref_57Z29YIQ2J"
                        )
                        bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}: {tx_type}")
            else:
                logger.warning(f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è {address}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name}: {str(e)}")
            bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name}: {str(e)}")
        time.sleep(5)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def classify_transaction(tx):
    changes = tx.get("change", [])
    if not changes:
        return "unknown"
    
    amount_change = changes[0]["amount"]
    token = changes[0].get("tokenAddress", "")
    
    if "swap" in tx.get("txType", "").lower():
        return "swap"
    elif tx["lamport"] != 0:
        return "receive" if tx["lamport"] > 0 else "send"
    elif token:
        return "buy" if amount_change > 0 else "sell"
    return "unknown"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ûï Add", callback_data='add')],
        [InlineKeyboardButton("üìÅ List", callback_data='list')],
        [InlineKeyboardButton("‚úÖ Menu", callback_data='menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def types_menu(selected_types):
    types = [
        ("Swap", "swap"), ("Swap Buy", "swap_buy"), ("Swap Sell", "swap_sell"),
        ("Transfer", "transfer"), ("Lending", "lending"),
        ("NFT Mint", "nft_mint"), ("NFT Trade", "nft_trade"),
        ("NFT Transfer", "nft_transfer"), ("NFT Lending", "nft_lending"),
        ("Bridge", "bridge"), ("Reward", "reward"),
        ("Approvals", "approvals"), ("Perpetual", "perpetual"),
        ("Option", "option"), ("Wrap", "wrap"),
        ("NFT liquidation", "nft_liquidation"), ("Contract creation", "contract_creation"),
        ("Other", "other")
    ]
    keyboard = []
    row = []
    for label, type_id in types:
        emoji = "‚úÖ" if type_id in selected_types else "‚¨ú"
        row.append(InlineKeyboardButton(f"{emoji} {label}", callback_data=f"type_{type_id}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([
        InlineKeyboardButton("‚úÖ Confirm", callback
