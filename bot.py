import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
import requests
import time
from threading import Thread, Lock
import logging
import os
import random
import http.server
import socketserver
from solana.rpc.websocket_api import connect
from solana.rpc.api import Client
import json
from base64 import b64decode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–≤–æ–π Telegram Bot —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
PORT = int(os.getenv("PORT", 8443))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8443

def start_dummy_server():
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        logger.info(f"–§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        httpd.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
dummy_server_thread = Thread(target=start_dummy_server, daemon=True)
dummy_server_thread.start()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
tracked_wallets = {}
wallet_lock = Lock()  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ tracked_wallets

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
monitoring_threads = {}

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}

# Telegram –±–æ—Ç
updater = Updater(BOT_TOKEN, use_context=True)
bot = updater.bot

# –ö—É—Ä—Å SOL –≤ USD (–¥–ª—è —Ç–µ—Å—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API, –Ω–∞–ø—Ä–∏–º–µ—Ä, CoinGecko)
SOL_TO_USD = 137.0  # –ü—Ä–∏–º–µ—Ä: 1 SOL = 137 USD (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)

# Solana WebSocket –∫–ª–∏–µ–Ω—Ç
SOLANA_WS_URL = "wss://api.mainnet-beta.solana.com"
SOLANA_HTTP_URL = "https://api.mainnet-beta.solana.com"
solana_client = Client(SOLANA_HTTP_URL)

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket
async def monitor_wallet_ws(address, name, types, chat_id):
    async with connect(SOLANA_WS_URL) as ws:
        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        await ws.account_subscribe(address)
        first_resp = await ws.recv()
        subscription_id = first_resp.result
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ {name} ({address}) —É—Å–ø–µ—à–Ω–∞, ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}")

        error_notified = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        try:
            async for msg in ws:
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket
                try:
                    data = msg.result.value
                    if not data:
                        if not error_notified:
                            bot.send_message(chat_id=chat_id, text=f"–ö–æ—à–µ–ª–µ–∫ {name} ({address}) –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
                            error_notified = True
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    signature = data["signature"]
                    logger.info(f"–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è {name}: {signature}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Solana JSON-RPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tx_response = solana_client.get_transaction(signature, encoding="jsonParsed")
                    if not tx_response["result"]:
                        if not error_notified:
                            bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {signature} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {name}.")
                            error_notified = True
                        continue

                    tx = tx_response["result"]
                    tx_type = classify_transaction(tx)
                    if tx_type in types:
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω—É–∂–µ–Ω API –¥–ª—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                        sol_amount = tx.get("meta", {}).get("fee", 0) / 1_000_000_000  # –õ–∞–º–ø–æ—Ä—Ç—ã –≤ SOL (–∏—Å–ø–æ–ª—å–∑—É–µ–º fee –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
                        usd_amount = sol_amount * SOL_TO_USD
                        token_amount = random.uniform(5000000, 10000000)  # –ü—Ä–∏–º–µ—Ä
                        token_name = "NYCPR"  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API
                        token_price = 0.000037  # –ü—Ä–∏–º–µ—Ä
                        market_cap = "300.4K"  # –ü—Ä–∏–º–µ—Ä

                        msg = (
                            f"#{name.upper()}\n"
                            f"Swapped {sol_amount:.2f} #SOL (${usd_amount:,.2f}) for {token_amount:,.2f} #{token_name} @ ${token_price}\n"
                            f"MC: ${market_cap}\n"
                            f"#Solana | [Cielo](https://www.cielo.app/) | [ViewTx](https://solscan.io/tx/{signature}) | [Chart](https://www.dextools.io/app/en/solana)\n"
                            f"[Buy on Trojan](https://t.me/BloomSolana_bot?start=ref_57Z29YIQ2J)\n\n"
                            f"üëâ –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: https://gmgn.ai/?ref=HiDMfJX4&chain=sol\n"
                            f"üëâ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Bloom: https://t.me/BloomSolana_bot?start=ref_57Z29YIQ2J"
                        )
                        bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}: {tx_type}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {name}: {str(e)}")
                    if not error_notified:
                        bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name}: {str(e)}")
                        error_notified = True
        finally:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await ws.account_unsubscribe(subscription_id)

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def classify_transaction(tx):
    meta = tx.get("meta", {})
    instructions = tx.get("transaction", {}).get("message", {}).get("instructions", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for instruction in instructions:
        program_id = instruction.get("programId", "")
        if "spl-token" in program_id.lower():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤–∞–ø)
            if "transfer" in str(instruction).lower():
                return "transfer"
            elif "swap" in str(instruction).lower():
                return "swap"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SOL
    if meta.get("preBalances") and meta.get("postBalances"):
        pre_balances = meta["preBalances"]
        post_balances = meta["postBalances"]
        if pre_balances[0] != post_balances[0]:
            return "receive" if post_balances[0] > pre_balances[0] else "send"
    
    return "unknown"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ûï Add", callback_data='add')],
        [InlineKeyboardButton("üìÅ List", callback_data='list')],
        [InlineKeyboardButton("‚úÖ Menu", callback_data='menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def types_menu(selected_types):
    types = [
        ("Swap", "swap"), ("Swap Buy", "swap_buy"), ("Swap Sell", "swap_sell"),
        ("Transfer", "transfer"), ("Lending", "lending"),
        ("NFT Mint", "nft_mint"), ("NFT Trade", "nft_trade"),
        ("NFT Transfer", "nft_transfer"), ("NFT Lending", "nft_lending"),
        ("Bridge", "bridge"), ("Reward", "reward"),
        ("Approvals", "approvals"), ("Perpetual", "perpetual"),
        ("Option", "option"), ("Wrap", "wrap"),
        ("NFT liquidation", "nft_liquidation"), ("Contract creation", "contract_creation"),
        ("Other", "other")
    ]
    keyboard = []
    row = []
    for label, type_id in types:
        emoji = "‚úÖ" if type_id in selected_types else "‚¨ú"
        row.append(InlineKeyboardButton(f"{emoji} {label}", callback_data=f"type_{type_id}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([
        InlineKeyboardButton("Select All", callback_data='select_all'),
        InlineKeyboardButton("‚úÖ Confirm", callback_data='confirm_types'),
        InlineKeyboardButton("‚ùå Cancel", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
def start(update, context):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–∫–µ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    data = query.data

    if data == 'add':
        user_states[user_id] = {'state': 'awaiting_address', 'selected_types': []}
        query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Solana:")
    elif data == 'list':
        with wallet_lock:
            if not tracked_wallets:
                query.message.reply_text("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.", reply_markup=main_menu())
                return
            response = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:\n\n"
            for name, data in tracked_wallets.items():
                response += f"üíº {name} (Solana)\n–ö–û–ü–ò–†–û–í–ê–¢–¨\n{data['address']}\n/edit_{random.randint(1000000, 9999999)}\n\n"
        query.message.reply_text(response, reply_markup=main_menu())
        logger.info("–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    elif data == 'menu':
        keyboard = [
            [InlineKeyboardButton("‚ûï Add", callback_data='add')],
            [InlineKeyboardButton("üìÅ List", callback_data='list')],
            [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª @degen_danny", url='https://t.me/degen_danny')]
        ]
        query.message.reply_text(
            "–ú–µ–Ω—é:\n"
            "–ö–∞–Ω–∞–ª: @degen_danny\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif data == 'cancel':
        if user_id in user_states:
            del user_states[user_id]
        query.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    elif data.startswith('type_'):
        type_id = data.split('_')[1]
        if user_id not in user_states:
            return
        selected_types = user_states[user_id].get('selected_types', [])
        if type_id in selected_types:
            selected_types.remove(type_id)
        else:
            selected_types.append(type_id)
        user_states[user_id]['selected_types'] = selected_types
        query.message.edit_reply_markup(reply_markup=types_menu(selected_types))
    elif data == 'select_all':
        if user_id not in user_states:
            return
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        all_types = [
            "swap", "swap_buy", "swap_sell", "transfer", "lending",
            "nft_mint", "nft_trade", "nft_transfer", "nft_lending",
            "bridge", "reward", "approvals", "perpetual", "option",
            "wrap", "nft_liquidation", "contract_creation", "other"
        ]
        user_states[user_id]['selected_types'] = all_types
        query.message.edit_reply_markup(reply_markup=types_menu(all_types))
    elif data == 'confirm_types':
        if user_id not in user_states:
            return
        state = user_states[user_id]
        name = state.get('name')
        address = state.get('address')
        types = state.get('selected_types', [])
        if not types:
            query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.", reply_markup=types_menu(types))
            return
        
        with wallet_lock:
            tracked_wallets[name] = {"address": address, "types": types, "last_tx": None}
        thread = Thread(target=lambda: updater.run_async(monitor_wallet_ws, address, name, types, chat_id))
        thread.start()
        with wallet_lock:
            monitoring_threads[name] = thread  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫
        query.message.reply_text(f"–ö–æ—à–µ–ª–µ–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.", reply_markup=main_menu())
        logger.info(f"–ö–æ—à–µ–ª–µ–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω: {address}, —Ç–∏–ø—ã: {types}")
        del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update, context):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    text = update.message.text

    if user_id not in user_states:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu())
        return

    state = user_states[user_id]['state']

    if state == 'awaiting_address':
        user_states[user_id]['address'] = text
        user_states[user_id]['state'] = 'awaiting_name'
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:")
    elif state == 'awaiting_name':
        name = text
        user_states[user_id]['name'] = name
        user_states[user_id]['state'] = 'awaiting_types'
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=types_menu([]))

def main():
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
