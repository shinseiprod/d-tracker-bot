import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler
from telegram.ext import filters  # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
import requests
import time
import logging
import os
import random
import http.server
import socketserver
from solana.rpc.websocket_api import connect
from solana.rpc.api import Client
import json
from base64 import b64decode
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–≤–æ–π Telegram Bot —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –§–∏–∫—Ç–∏–≤–Ω—ã–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
PORT = int(os.getenv("PORT", 8443))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8443

def start_dummy_server():
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        logger.info(f"–§–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        httpd.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
dummy_server_thread = asyncio.get_event_loop().run_in_executor(None, start_dummy_server)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
tracked_wallets = {}
wallet_lock = asyncio.Lock()  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ tracked_wallets

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}

# –ö—É—Ä—Å SOL –≤ USD (–¥–ª—è —Ç–µ—Å—Ç–∞, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API, –Ω–∞–ø—Ä–∏–º–µ—Ä, CoinGecko)
SOL_TO_USD = 137.0  # –ü—Ä–∏–º–µ—Ä: 1 SOL = 137 USD (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ)

# Solana WebSocket –∫–ª–∏–µ–Ω—Ç
SOLANA_WS_URL = "wss://api.mainnet-beta.solana.com"
SOLANA_HTTP_URL = "https://api.mainnet-beta.solana.com"
solana_client = Client(SOLANA_HTTP_URL)

# –ü—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
SPL_TOKEN_PROGRAM_ID = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623DQ5x"  # SPL Token Program
JUPITER_PROGRAM_ID = "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTp1"  # Jupiter Aggregator
PUMP_FUN_PROGRAM_ID = "6EF8rrecthR5DkcocFusWxY6dvdTQXThK6JVZSJ1C1"  # Pump Fun
RAYDIUM_PROGRAM_ID = "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"  # Raydium

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket (–¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º)
async def monitor_program_ws(address, name, types, chat_id, program_id, bot):
    async with connect(SOLANA_WS_URL) as ws:
        # –î–∞—ë–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket
        await asyncio.sleep(5)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        await ws.program_subscribe(program_id)
        first_resp = await ws.recv()
        subscription_id = first_resp.result
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É {program_id} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {name} ({address}) —É—Å–ø–µ—à–Ω–∞, ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}")

        error_notified = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        try:
            async for msg in ws:
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket
                try:
                    data = msg.result
                    if not data:
                        if not error_notified:
                            await bot.send_message(chat_id=chat_id, text=f"–ö–æ—à–µ–ª–µ–∫ {name} ({address}) –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã {program_id}.")
                            error_notified = True
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å –Ω–∞—à–∏–º –∫–æ—à–µ–ª—å–∫–æ–º
                    accounts = data.get("value", {}).get("transaction", {}).get("message", {}).get("accountKeys", [])
                    if address not in accounts:
                        continue

                    signature = data.get("value", {}).get("signature")
                    if not signature:
                        continue

                    logger.info(f"–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è {name} —á–µ—Ä–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—É {program_id}: {signature}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Solana JSON-RPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tx_response = solana_client.get_transaction(signature, encoding="jsonParsed")
                    if not tx_response["result"]:
                        if not error_notified:
                            await bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {signature} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {name}.")
                            error_notified = True
                        continue

                    tx = tx_response["result"]
                    tx_type = classify_transaction(tx)
                    if tx_type in types:
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω—É–∂–µ–Ω API –¥–ª—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                        sol_amount = tx.get("meta", {}).get("fee", 0) / 1_000_000_000  # –õ–∞–º–ø–æ—Ä—Ç—ã –≤ SOL (–∏—Å–ø–æ–ª—å–∑—É–µ–º fee –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
                        usd_amount = sol_amount * SOL_TO_USD
                        token_amount = random.uniform(5000000, 10000000)  # –ü—Ä–∏–º–µ—Ä
                        token_name = "NYCPR"  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API
                        token_price = 0.000037  # –ü—Ä–∏–º–µ—Ä
                        market_cap = "300.4K"  # –ü—Ä–∏–º–µ—Ä

                        msg = (
                            f"#{name.upper()}\n"
                            f"Swapped {sol_amount:.2f} #SOL (${usd_amount:,.2f}) for {token_amount:,.2f} #{token_name} @ ${token_price}\n"
                            f"MC: ${market_cap}\n"
                            f"#Solana | [ViewTx](https://solscan.io/tx/{signature}) | [Chart](https://www.dextools.io/app/en/solana)\n"
                            f"üëâ –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: https://gmgn.ai/?ref=HiDMfJX4&chain=sol\n"
                            f"üëâ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Bloom: https://t.me/BloomSolana_bot?start=ref_57Z29YIQ2J"
                        )
                        await bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}: {tx_type}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {name} (–ø—Ä–æ–≥—Ä–∞–º–º–∞ {program_id}): {str(e)}")
                    if not error_notified:
                        await bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name} (–ø—Ä–æ–≥—Ä–∞–º–º–∞ {program_id}): {str(e)}")
                        error_notified = True
        finally:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await ws.program_unsubscribe(subscription_id)

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –ø—Ä—è–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å SOL)
async def monitor_account_ws(address, name, types, chat_id, bot):
    async with connect(SOLANA_WS_URL) as ws:
        # –î–∞—ë–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebSocket
        await asyncio.sleep(5)

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
        await ws.account_subscribe(address)
        first_resp = await ws.recv()
        subscription_id = first_resp.result
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {name} ({address}) —É—Å–ø–µ—à–Ω–∞, ID –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_id}")

        error_notified = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        try:
            async for msg in ws:
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket
                try:
                    data = msg.result
                    if not data:
                        if not error_notified:
                            await bot.send_message(chat_id=chat_id, text=f"–ö–æ—à–µ–ª–µ–∫ {name} ({address}) –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
                            error_notified = True
                        continue

                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    signature = data.get("value", {}).get("signature")
                    if not signature:
                        continue

                    logger.info(f"–ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è {name} (account_subscribe): {signature}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Solana JSON-RPC –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tx_response = solana_client.get_transaction(signature, encoding="jsonParsed")
                    if not tx_response["result"]:
                        if not error_notified:
                            await bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {signature} –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ {name}.")
                            error_notified = True
                        continue

                    tx = tx_response["result"]
                    tx_type = classify_transaction(tx)
                    if tx_type in types:
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω—É–∂–µ–Ω API –¥–ª—è —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                        sol_amount = tx.get("meta", {}).get("fee", 0) / 1_000_000_000  # –õ–∞–º–ø–æ—Ä—Ç—ã –≤ SOL (–∏—Å–ø–æ–ª—å–∑—É–µ–º fee –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
                        usd_amount = sol_amount * SOL_TO_USD
                        token_amount = random.uniform(5000000, 10000000)  # –ü—Ä–∏–º–µ—Ä
                        token_name = "NYCPR"  # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ä–µ–∑ API
                        token_price = 0.000037  # –ü—Ä–∏–º–µ—Ä
                        market_cap = "300.4K"  # –ü—Ä–∏–º–µ—Ä

                        msg = (
                            f"#{name.upper()}\n"
                            f"Swapped {sol_amount:.2f} #SOL (${usd_amount:,.2f}) for {token_amount:,.2f} #{token_name} @ ${token_price}\n"
                            f"MC: ${market_cap}\n"
                            f"#Solana | [ViewTx](https://solscan.io/tx/{signature}) | [Chart](https://www.dextools.io/app/en/solana)\n"
                            f"üëâ –ö—É–ø–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç: https://gmgn.ai/?ref=HiDMfJX4&chain=sol\n"
                            f"üëâ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Bloom: https://t.me/BloomSolana_bot?start=ref_57Z29YIQ2J"
                        )
                        await bot.send_message(chat_id=chat_id, text=msg, parse_mode='Markdown')
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {name}: {tx_type}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è {name} (account_subscribe): {str(e)}")
                    if not error_notified:
                        await bot.send_message(chat_id=chat_id, text=f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {name} (account_subscribe): {str(e)}")
                        error_notified = True
        finally:
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await ws.account_unsubscribe(subscription_id)

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
async def monitor_wallet(address, name, types, chat_id, bot):
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è SPL Token Program
    asyncio.create_task(monitor_program_ws(address, name, types, chat_id, SPL_TOKEN_PROGRAM_ID, bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è Jupiter Aggregator
    asyncio.create_task(monitor_program_ws(address, name, types, chat_id, JUPITER_PROGRAM_ID, bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è Pump Fun
    asyncio.create_task(monitor_program_ws(address, name, types, chat_id, PUMP_FUN_PROGRAM_ID, bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è Raydium
    asyncio.create_task(monitor_program_ws(address, name, types, chat_id, RAYDIUM_PROGRAM_ID, bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–ª—è –ø—Ä—è–º—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å SOL)
    asyncio.create_task(monitor_account_ws(address, name, types, chat_id, bot))

# –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def classify_transaction(tx):
    meta = tx.get("meta", {})
    instructions = tx.get("transaction", {}).get("message", {}).get("instructions", [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for instruction in instructions:
        program_id = instruction.get("programId", "")
        if "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623DQ5x" in program_id:
            # SPL Token Program
            parsed = instruction.get("parsed", {})
            if parsed and parsed.get("type") == "transfer":
                return "transfer"
            elif parsed and parsed.get("type") == "mint":
                return "nft_mint"
        elif "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTp1" in program_id:
            # Jupiter Aggregator (—Å–≤–∞–ø—ã)
            return "swap"
        elif "6EF8rrecthR5DkcocFusWxY6dvdTQXThK6JVZSJ1C1" in program_id:
            # Pump Fun (—Å–≤–∞–ø—ã –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–∫–µ–Ω–æ–≤)
            return "swap"
        elif "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8" in program_id:
            # Raydium (—Å–≤–∞–ø—ã)
            return "swap"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ SOL
    if meta.get("preBalances") and meta.get("postBalances"):
        pre_balances = meta["preBalances"]
        post_balances = meta["postBalances"]
        if pre_balances[0] != post_balances[0]:
            return "receive" if post_balances[0] > pre_balances[0] else "send"
    
    return "unknown"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    keyboard = [
        [InlineKeyboardButton("‚ûï Add", callback_data='add')],
        [InlineKeyboardButton("üìÅ List", callback_data='list')],
        [InlineKeyboardButton("‚úÖ Menu", callback_data='menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def types_menu(selected_types):
    types = [
        ("Swap", "swap"), ("Swap Buy", "swap_buy"), ("Swap Sell", "swap_sell"),
        ("Transfer", "transfer"), ("Lending", "lending"),
        ("NFT Mint", "nft_mint"), ("NFT Trade", "nft_trade"),
        ("NFT Transfer", "nft_transfer"), ("NFT Lending", "nft_lending"),
        ("Bridge", "bridge"), ("Reward", "reward"),
        ("Approvals", "approvals"), ("Perpetual", "perpetual"),
        ("Option", "option"), ("Wrap", "wrap"),
        ("NFT liquidation", "nft_liquidation"), ("Contract creation", "contract_creation"),
        ("Other", "other")
    ]
    keyboard = []
    row = []
    for label, type_id in types:
        emoji = "‚úÖ" if type_id in selected_types else "‚¨ú"
        row.append(InlineKeyboardButton(f"{emoji} {label}", callback_data=f"type_{type_id}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([
        InlineKeyboardButton("Select All", callback_data='select_all'),
        InlineKeyboardButton("‚úÖ Confirm", callback_data='confirm_types'),
        InlineKeyboardButton("‚ùå Cancel", callback_data='cancel')
    ])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–∫–µ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    data = query.data

    if data == 'add':
        user_states[user_id] = {'state': 'awaiting_address', 'selected_types': []}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ Solana:")
    elif data == 'list':
        async with wallet_lock:
            if not tracked_wallets:
                await query.message.reply_text("–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.", reply_markup=main_menu())
                return
            response = "–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:\n\n"
            for name, data in tracked_wallets.items():
                response += f"üíº {name} (Solana)\n–ö–û–ü–ò–†–û–í–ê–¢–¨\n{data['address']}\n/edit_{random.randint(1000000, 9999999)}\n\n"
        await query.message.reply_text(response, reply_markup=main_menu())
        logger.info("–°–ø–∏—Å–æ–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    elif data == 'menu':
        keyboard = [
            [InlineKeyboardButton("‚ûï Add", callback_data='add')],
            [InlineKeyboardButton("üìÅ List", callback_data='list')],
            [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª @degen_danny", url='https://t.me/degen_danny')]
        ]
        await query.message.reply_text(
            "–ú–µ–Ω—é:\n"
            "–ö–∞–Ω–∞–ª: @degen_danny\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif data == 'cancel':
        if user_id in user_states:
            del user_states[user_id]
        await query.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu())
    elif data.startswith('type_'):
        type_id = data.split('_')[1]
        if user_id not in user_states:
            return
        selected_types = user_states[user_id].get('selected_types', [])
        if type_id in selected_types:
            selected_types.remove(type_id)
        else:
            selected_types.append(type_id)
        user_states[user_id]['selected_types'] = selected_types
        await query.message.edit_reply_markup(reply_markup=types_menu(selected_types))
    elif data == 'select_all':
        if user_id not in user_states:
            return
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        all_types = [
            "swap", "swap_buy", "swap_sell", "transfer", "lending",
            "nft_mint", "nft_trade", "nft_transfer", "nft_lending",
            "bridge", "reward", "approvals", "perpetual", "option",
            "wrap", "nft_liquidation", "contract_creation", "other"
        ]
        user_states[user_id]['selected_types'] = all_types
        await query.message.edit_reply_markup(reply_markup=types_menu(all_types))
    elif data == 'confirm_types':
        if user_id not in user_states:
            return
        state = user_states[user_id]
        name = state.get('name')
        address = state.get('address')
        types = state.get('selected_types', [])
        if not types:
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.", reply_markup=types_menu(types))
            return
        
        async with wallet_lock:
            tracked_wallets[name] = {"address": address, "types": types, "last_tx": None}
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        await monitor_wallet(address, name, types, chat_id, context.bot)
        await query.message.reply_text(f"–ö–æ—à–µ–ª–µ–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.", reply_markup=main_menu())
        logger.info(f"–ö–æ—à–µ–ª–µ–∫ {name} –¥–æ–±–∞–≤–ª–µ–Ω: {address}, —Ç–∏–ø—ã: {types}")
        del user_states[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: telegram.Update, context: telegram.ext.ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    text = update.message.text

    if user_id not in user_states:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.", reply_markup=main_menu())
        return

    state = user_states[user_id]['state']

    if state == 'awaiting_address':
        user_states[user_id]['address'] = text
        user_states[user_id]['state'] = 'awaiting_name'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞:")
    elif state == 'awaiting_name':
        name = text
        user_states[user_id]['name'] = name
        user_states[user_id]['state'] = 'awaiting_types'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:", reply_markup=types_menu([]))

def main():
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.Text() & ~filters.Command(), handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
